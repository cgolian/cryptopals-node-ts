import {mt19937rng, mt19937w32bitsConstants, SeededRng} from './challenge21';

/**
 * Reverse tempering step y = y ^ (y >>> constants.l)
 * @param generated number generated by RNG
 */
function reverseLShift(generated: number): number {
    // first 18 bits are 'preserved' during the operation
    const bits1to18Mask = 0xffffc000;
    const bits1to18 = generated & bits1to18Mask;
    // bits 19 to 32 are XORd with bits 1 to 18 shifted right
    const bits19to32Mask = 0x00003fff;
    const bits19to32 = (generated ^ (bits1to18 >>> mt19937w32bitsConstants.l)) & bits19to32Mask;
    return bits1to18 | bits19to32;
}

/**
 * Reverse tempering step y ^= (y << constants.t) & constants.c;
 * @param generated number generated by RNG
 */
function reverseTShift(generated: number): number {
    const bits17to32Mask = 0x0001ffff;
    const bits17to32 = generated & bits17to32Mask;
    const plainBitsMask = 0x10390000;
    const plainBits = generated & plainBitsMask;
    const xoredBitsMask = 0xefc60000;
    const xoredBits = (generated ^ (bits17to32 << mt19937w32bitsConstants.t)) & xoredBitsMask;
    return plainBits | xoredBits | bits17to32;
}

/**
 * Reverse tempering step
 * @param generated y ^= (y << constants.s) & constants.b
 */
function reverseSShift(generated: number): number {
    const plainBitsMask = 0x62d3a97f;
    let plainBits = generated & plainBitsMask;
    // recover 7th quartet (b25)
    const quartet7Mask = 0x00000080;
    const quartet7 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet7Mask;
    plainBits = plainBits | quartet7;
    // recover 6th quartet (b22 and b23)
    const quartet6Mask = 0x00000600;
    const quartet6 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet6Mask;
    plainBits = plainBits | quartet6;
    // recover 5th quartet (b18 and b20)
    const quartet5Mask = 0x00005000;
    const quartet5 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet5Mask;
    plainBits = plainBits | quartet5;
    // recover 4th quartet (b13 and b14)
    const quartet4Mask = 0x000c0000;
    const quartet4 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet4Mask;
    plainBits = plainBits | quartet4;
    // recover 3th quartet (b11)
    const quartet3Mask = 0x00200000;
    const quartet3 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet3Mask;
    plainBits = plainBits | quartet3;
    // recover 2nd quartet (b5, b6, b8)
    const quartet2Mask = 0x0d000000;
    const quartet2 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet2Mask;
    plainBits = plainBits | quartet2;
    // revcover 1st quartet (b1, b4)
    const quartet1Mask = 0x90000000;
    const quartet1 = (generated ^ (plainBits << mt19937w32bitsConstants.s)) & quartet1Mask;
    plainBits = plainBits | quartet1;
    return plainBits;
}

/**
 * Reverse tempering step y ^= (y >>> constants.u);
 * @param generated generated number generated by RNG
 */
function reverseUShift(generated: number): number {
    // first 11 bits are 'preserved' during the operation
    const bits1to11Mask = 0xffe00000;
    const bits1to11 = generated & bits1to11Mask;
    // we can't recover bits 12 to 32 right away since we need also bits 12 to 22 to get bits 23 to 32
    const bits12to22Mask = 0x001ffc00;
    const bits12to22 = (generated ^ (bits1to11 >>> mt19937w32bitsConstants.u)) & bits12to22Mask;
    const bits23to32Mask = 0x000003ff;
    const bits23to32 = (generated ^ (bits12to22 >>> mt19937w32bitsConstants.u)) & bits23to32Mask;
    return bits1to11 | bits12to22 | bits23to32;
}

export function untemper(mt19937output: number): number {
    const lShiftReversed = reverseLShift(mt19937output);
    const tShiftReversed = reverseTShift(lShiftReversed);
    const sShiftReversed = reverseSShift(tShiftReversed);
    return reverseUShift(sShiftReversed);
}

export function copyMT19937Generator(generator: SeededRng): SeededRng {
    const originalState = [];
    for (let i = 0; i < mt19937w32bitsConstants.n; i++) {
        const original = untemper(generator());
        originalState.push(original);
    }
    // it does not matter what we use as seed in the following call...
    return mt19937rng(0xDEADBEEF, 32, originalState);
}